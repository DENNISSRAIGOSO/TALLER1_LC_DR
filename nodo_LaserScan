#!/usr/bin/python
import rospy
import math
from std_msgs.msg import String
from std_msgs.msg import Bool
from sensor_msgs.msg import LaserScan
class Node ():
	def __init__(self):
		self.rospy=rospy
		self.rospy.init_node("nodo_control",anonymous=True)
		self.initParameters()
		self.initSubscribers()
		self.initPublishers()
		self.main()
	def initParameters(self):
		self.topic_scan="/scan"
		self.topic_aux="/aux_topic"
		self.topic_vel="/cmd_vel"
		self.msg_scan=[]
		self.msg_grupos=list()
		self.msg_aux=Bool()
		self.msg_bandera=Bool()
		self.msg_obstaculo=Bool()
		self.change_scan=False
		self.rate=self.rospy.Rate(50)	
		return
	def callback_scan(self, msg):
		self.msg_scan=[msg.angle_min, msg.angle_max, msg.angle_increment, msg.range_min, msg.range_max, msg.ranges]		
		self.change_scan=True
		return
	def initSubscribers(self):
		self.sub_scan=self.rospy.Subscriber(self.topic_scan, LaserScan, self.callback_scan)
	def initPublishers(self):
		self.pub_aux=self.rospy.Publisher(self.topic_aux, Bool, queue_size=10)
	def main(self):
		print("Nodo bien")
		while not self.rospy.is_shutdown():
			if self.change_scan:
				angle = self.msg_scan[0]
				x=[]
				y=[]
				i=0
				for i in self.msg_scan[5]:
					x.append(i*math.cos(angle))
					y.append(i*math.sin(angle))
					angle+=self.msg_scan[2]				
				bandera=False
				cont=0
				grupos=[]
				j=1
				for j in range (1,len (x)):
					if y[j]<1 and y[j] > 0:
						d = math.sqrt((x[j] - x[j-1])**2+(y[j] - y[j-1])**2)
						if d <= 0.1:
							cont=cont+1	
						else:
							grupos.append(cont)
							bandera=True
				if bandera==False:
					grupos.append(cont)
				obstaculo=False
				print(grupos)
				for l in grupos:
					if l>=10:
						obstaculo=True
				if obstaculo==True:
					self.msg_aux.data=True
				else:
					self.msg_aux.data=False	
				self.pub_aux.publish(self.msg_aux.data)
				print (self.msg_aux.data)
			self.rate.sleep()
if __name__=="__main__":
	try:
		print("Inciando Nodo bien bien")
		object=Node()
	except rospy.ROSInterruptException:
		print("Finalizando Nodo")
		pass



					
					
